service: portfolio-services

plugins:
  - serverless-domain-manager
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    production: api.appfocused.com
    dev: api-dev.appfocused.com
  tableName: 'portfolios-${self:custom.stage}'
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
      - production
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    certificateName: "www.appfocused.com"
    basePath: "portfolios"
    stage: ${self:custom.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - { "Fn::GetAtt": ["PortfoliosDynamoDbTable", "Arn" ] }
  environment:
    PORTFOLIOS_TABLE: ${self:custom.tableName}
    SERVICE_NAME: ${self:service}

functions:
  createPortfolio:
    handler: index.handler
    events:
      - http:
          path: portfolios/version
          method: get
          cors: true
  version:
    handler: index.handler
    events:
      - http:
          path: portfolios/
          method: post
          cors: true

resources:
  Resources:
    PortfoliosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}